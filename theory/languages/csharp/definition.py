import os
import re
from os import path
from typing import List, Optional

from theory.languages.std.definition import StdLangDefinition


class CSharpDefinition(StdLangDefinition):
    """C# language definition."""

    @staticmethod
    def get_translated_file_name(filename: str):
        filename_wo_ext = path.splitext(filename)[0]
        return f'{filename_wo_ext}.cs'

    @staticmethod
    def create_project_files(project_path: str, added_file_paths: List[str] = None):
        sln_name = 'Application'
        sln_path = path.join(project_path, sln_name)

        # Create VS project from template
        os.system(f'cd {project_path} && dotnet new console -lang="C#" -n {sln_name}')

        # Create VS solution
        os.system(f'cd {project_path} && dotnet new sln -n {sln_name}')
        os.system(f'cd {project_path} && dotnet sln add {sln_name}')

        # Remove autogenerated "Program.cs" file
        autogenerated_cs_path = path.join(sln_path, 'Program.cs')
        os.system(f'rm {autogenerated_cs_path}')

        # Add files to project
        if added_file_paths is not None:
            for file_path in added_file_paths:
                os.system(f'mv {file_path} {sln_path}')

        # Install packages
        CSharpDefinition.install_package(sln_path, 'MySql.Data')

        # Format project files
        CSharpDefinition.format_project_files(project_path)

        return path.join(project_path, sln_name)

    @staticmethod
    def format_project_files(project_path: str):
        os.system(f'cd {project_path} && dotnet format')

    @staticmethod
    def install_package(project_path: str, package_name: str):
        os.system(f'cd {project_path} && dotnet add package {package_name}')

    @staticmethod
    def invert_condition(condition: str) -> Optional[str]:
        # Format: "VarName"
        if re.match(r'^\w+$', condition):
            return f'!{condition}'

        # Format: "!VarName"
        if re.match(r'^!\w+$', condition):
            return condition[1:]

        # Format: "VarName == null" or "VarName != null"
        match = re.match(r'^(\w+) (!|=)= (\w+)$', condition)
        if match is not None:
            var_1 = match.group(1)
            op = match.group(2)
            op = '!' if op == '=' else '='
            var_2 = match.group(3)
            return f'{var_1} {op}= {var_2}'

        return None
